name: Build Custom Raspberry Pi Image

on:
  pull_request:
    branches: [ master ]
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static binfmt-support

    - name: Download base Raspberry Pi image
      run: |
        wget http://cdimage.ubuntu.com/releases/22.04.4/release/ubuntu-22.04.4-preinstalled-server-arm64+raspi.img.xz
        xz -d ubuntu-22.04.4-preinstalled-server-arm64+raspi.img.xz

    - name: Mount image
      run: |
        sudo losetup -fP ubuntu-22.04.4-preinstalled-server-arm64+raspi.img
        LOOP_DEVICE=$(losetup -a | grep 'ubuntu-22.04.4-preinstalled-server-arm64+raspi.img' | cut -d: -f1)
        sudo mkdir -p /mnt/rpi
        sudo mount ${LOOP_DEVICE}p2 /mnt/rpi

    - name: Customize image
      run: |
        set -x  # Enable debugging output
        
        # Remount the filesystem as read-write
        sudo mount -o remount,rw /mnt/rpi
        
        sudo cp /usr/bin/qemu-aarch64-static /mnt/rpi/usr/bin/
        
        # Check the content of the mounted image and the /etc directory
        sudo ls -la /mnt/rpi
        sudo ls -la /mnt/rpi/etc
        
        # Try to create resolv.conf in a different way
        sudo touch /mnt/rpi/etc/resolv.conf
        sudo sh -c 'echo "nameserver 8.8.8.8" >> /mnt/rpi/etc/resolv.conf'
        sudo sh -c 'echo "nameserver 8.8.4.4" >> /mnt/rpi/etc/resolv.conf'
        
        # Check if resolv.conf was created
        sudo ls -la /mnt/rpi/etc/resolv.conf
        sudo cat /mnt/rpi/etc/resolv.conf
        
        # Mount necessary filesystems
        sudo mount -t proc none /mnt/rpi/proc
        sudo mount -t sysfs none /mnt/rpi/sys
        sudo mount -o bind /dev /mnt/rpi/dev
        
        sudo chroot /mnt/rpi /bin/bash << EOF
          set -e
          export DEBIAN_FRONTEND=noninteractive
          
          # Create dc user and set up sudo
          useradd -m -s /bin/bash dc
          echo "dc ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/dc
          
          apt-get update
          apt-get install -y x11-xserver-utils xterm xinit vim git jq python3-pip build-essential cmake g++ libpcsclite-dev libcurl4-openssl-dev python3-pip libmbim-utils network-manager can-utils python3-tk python3-zmq
          
          pip3 install python-can cantools can-isotp pillow pydbus gpiozero RPi.GPIO
          pip3 install git+https://github.com/AndySchroder/RPi_mcp3008
          pip3 install git+https://github.com/AndySchroder/helpers2
          pip3 install git+https://github.com/AndySchroder/lnd-grpc-client.git
          
          mkdir -p /home/dc/Desktop
          cd /home/dc/Desktop
          git clone https://github.com/joshwardell/model3dbc
          cd model3dbc
          git reset --hard 7ec978ca618f13be375f0be9b2f25c19da500d3f
          cd ..
          git clone https://github.com/AndySchroder/DistributedCharge
          chown -R dc:dc /home/dc/Desktop
          
          echo 'dtoverlay=mcp2515-can1,oscillator=16000000,interrupt=23' >> /boot/firmware/config.txt
          echo 'dtoverlay=mcp2515-can0,oscillator=16000000,interrupt=24' >> /boot/firmware/config.txt
          echo 'dtoverlay=spi1-1cs' >> /boot/firmware/config.txt
          echo '[Match]\nName=can0\n\n[CAN]\nBitRate=33300\n\n[Link]\nRequiredForOnline=no\n' > /etc/systemd/network/80-can0.network
          echo '[Match]\nName=can1\n\n[CAN]\nBitRate=500000\n\n[Link]\nRequiredForOnline=no\n' > /etc/systemd/network/80-can1.network
          
          mkdir -p /home/dc/.dc
          cp /home/dc/Desktop/DistributedCharge/SampleConfig/Config.yaml /home/dc/.dc/
          chown -R dc:dc /home/dc/.dc
          
          echo "@reboot xinit /home/dc/Desktop/DistributedCharge/Launcher-car" | crontab -u dc -
          if [ -f /etc/X11/Xwrapper.config ]; then
            sed -i -e 's/allowed_users=console/allowed_users=anybody/g' /etc/X11/Xwrapper.config
          else
            echo "allowed_users=anybody" > /etc/X11/Xwrapper.config
          fi
        EOF

    - name: Unmount image
      run: |
        sudo umount /mnt/rpi/dev || true
        sudo umount /mnt/rpi/sys || true
        sudo umount /mnt/rpi/proc || true
        sudo umount /mnt/rpi || true
        sudo losetup -d ${LOOP_DEVICE} || true
          
    - name: Compress image
      run: xz -z ubuntu-22.04.4-preinstalled-server-arm64+raspi.img

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: custom-rpi-image
        path: ubuntu-22.04.4-preinstalled-server-arm64+raspi.img.xz

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ubuntu-22.04.4-preinstalled-server-arm64+raspi.img.xz
        asset_name: custom-rpi-image.img.xz
        asset_content_type: application/x-xz